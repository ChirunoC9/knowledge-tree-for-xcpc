{
	"FenwickTree": {
		"prefix": "FenwickTree",
		"scope": "c++, cpp, cxx",
		"body": [
		  "template <typename Type, typename Operator = std::plus<Type>> requires requires(Type a, Type b, Operator opt) {",
		  "\t{opt(a, b)} -> std::convertible_to<Type>;",
		  "} class FenwickTree {",
		  "public:",
		  "\tFenwickTree(int size, Type initValue = Type{}, Operator opt = Operator{}) ",
		  "\t\t: bit(size + 1, initValue), opt(opt) {}",
		  "",
		  "\tvoid Assign(int size, Type value) {",
		  "\t\tbit.Assign(size, value);",
		  "\t}",
		  "",
		  "\tvoid Update(int idx, Type dx) {",
		  "\t\tfor (int i = idx + 1; i < (int)bit.size(); i += Lowbit(i)) {",
		  "\t\t\tbit[i] = opt(bit[i], dx);",
		  "\t\t}",
		  "\t}",
		  "",
		  "\tvoid Fill(Type value) {",
		  "\t\tstd::fill(bit.begin(), bit.end(), value);",
		  "\t}",
		  "",
		  "\tType Get(int idx, Type result = {}) const {",
		  "\t\tfor (int i = idx + 1; i > 0; i -= Lowbit(i)) {",
		  "\t\t\tresult = opt(result, bit[i]);",
		  "\t\t}",
		  "\t\treturn result;",
		  "\t}",
		  "",
		  "private:",
		  "\tconstexpr static int Lowbit(int x) noexcept {",
		  "\t\treturn x & -x;",
		  "\t}",
		  "",
		  "\tstd::vector<Type> bit;",
		  "\tOperator opt;",
		  "};"
		],
		"description": "FenwickTree"
	  },
	  "InlineFenwickTree": {
		"prefix": "InlineFenwickTree",
		"scope": "c++,cpp,cxx",
		"body": [
		  "std::vector<int> bit(n + 1);",
		  "auto Add = [&](int x, int n, int dx) {",
		  "\tfor (int i = x; i <= n; i += i & -i) {",
		  "\t\tbit[i] += dx;",
		  "\t}",
		  "};",
		  "auto Ask = [&](int x) {",
		  "\tint ret = 0;",
		  "\tfor (int i = x; i > 0; i -= i & -i) {",
		  "\t\tret += bit[i];",
		  "\t}",
		  "\treturn ret;",
		  "};"
		],
		"description": "InlineFenwickTree"
	  },
	  "Disjoin Set Uion": {
		"prefix": "DisjoinSetUion",
		"scope": "c++, cpp, cxx",
		"body": [
		  "class DisjointSetUnion {",
		  "public:",
		  "\tDisjointSetUnion(int size) ",
		  "\t\t: dad(size, -1), count{size} {}",
		  "",
		  "\tint Find(int x) {",
		  "\t\tif (dad[x] <= -1) {",
		  "\t\t\treturn x;",
		  "\t\t}",
		  "\t\treturn dad[x] = Find(dad[x]);",
		  "\t}",
		  "",
		  "\tint operator [] (int x) {",
		  "\t\treturn Find(x);",
		  "\t}",
		  "",
		  "\tbool Merge(int a, int b) {",
		  "\t\ta = Find(a); b = Find(b);",
		  "\t\tif (a == b)",
		  "\t\t\treturn false;",
		  "\t\tif (a > b)",
		  "\t\t\tstd::swap(a, b); ",
		  "\t\tdad[a] += dad[b];",
		  "\t\tdad[a] = b;",
		  "\t\t-- count;",
		  "\t\treturn true;",
		  "\t}",
		  "",
		  "\tbool IsSame(int a, int b) {",
		  "\t\treturn Find(a) == Find(b);",
		  "\t}",
		  "",
		  "\tvoid Assign(int size, int value = -1) {",
		  "\t\tdad.assign(size, value);",
		  "\t\tcount = size;",
		  "\t}",
		  "",
		  "\tvoid ReSet() {",
		  "\t\tstd::fill(std::begin(dad), std::end(dad), -1);",
		  "\t\tcount = dad.size();",
		  "\t}",
		  "",
		  "\tint Count(int x) {",
		  "\t\treturn -dad[Find(x)];",
		  "\t}",
		  "",
		  "\tint Count() const {",
		  "\t\treturn count;",
		  "\t}",
		  "",
		  "private:",
		  "\tstd::vector<int> dad;",
		  "\tint count;",
		  "};"
		],
		"description": "Disjoin Set Uion"
	  }
}