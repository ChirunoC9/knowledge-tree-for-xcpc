{
	"Mod Int32": {
		"prefix": "ModInt32",
		"body": [
		  "namespace RoyalGuard::Integer {",
		  "\ttemplate <int _P>",
		  "\tstruct ModInt32 {",
		  "\t\tusing i64 = std::int64_t;",
		  "\t\tstatic constexpr int P = _P;",
		  "\t\tint v;",
		  "\t\tModInt32() : v(0) {}",
		  "\t\tModInt32(i64 _v) { v = _v % P; if (v < 0)v += P; }",
		  "\t\texplicit operator int() const { return v; }",
		  "\t\texplicit operator long long() const { return v; }",
		  "\t\texplicit operator bool() const { return v > 0; }",
		  "\t\tbool operator == (const ModInt32 &o) const { return v == o.v; }",
		  "\t\tbool operator != (const ModInt32 &o) const { return v != o.v; }",
		  "\t\tModInt32 operator - () const { return ModInt32(v ? P - v : 0); }",
		  "\t\tModInt32 operator + () const { return *this; }",
		  "\t\tModInt32 & operator ++ () { v++; if (v == P)v = 0; return *this; }",
		  "\t\tModInt32 & operator -- () { if (v == 0)v = P; v--; return *this; }",
		  "\t\tModInt32 operator ++ (int) { ModInt32 r = *this; ++*this; return r; }",
		  "\t\tModInt32 operator -- (int) { ModInt32 r = *this; --*this; return r; }",
		  "\t\tModInt32 & operator += (const ModInt32 &o) { v += o.v; if (v >= P)v -= P; return *this; }",
		  "\t\tModInt32 operator + (const ModInt32 & o)const { return ModInt32(*this) += o; }",
		  "\t\tModInt32 & operator -= (const ModInt32 & o) { v -= o.v; if (v < 0)v += P; return *this; }",
		  "\t\tModInt32 operator - (const ModInt32 &o)const { return ModInt32(*this) -= o; }",
		  "\t\tModInt32 & operator *=(const ModInt32 & o) { v = (int)(((i64)v)*o.v%P); return *this; }",
		  "\t\tModInt32 operator * (const ModInt32 & o)const { return ModInt32(*this) *= o; }",
		  "\t\tModInt32 & operator /= (const ModInt32 & o) { return (*this) *= o.Inv(); }",
		  "\t\tModInt32 operator / (const ModInt32 & o)const { return ModInt32(*this) /= o; }",
		  "\t\tfriend ModInt32 operator + (const ModInt32 &x, const i64 &o) { return x + (ModInt32)o; }",
		  "\t\tfriend ModInt32 operator + (const i64 &o, const ModInt32 &x) { return x + (ModInt32)o; }",
		  "\t\tfriend ModInt32 operator - (const ModInt32 &x, const i64 &o) { return x - (ModInt32)o; }",
		  "\t\tfriend ModInt32 operator - (const i64 &o, const ModInt32 &x) { return (ModInt32)o - x; }",
		  "\t\tfriend ModInt32 operator * (const ModInt32 &x, const i64 &o) { return x * (ModInt32)o; }",
		  "\t\tfriend ModInt32 operator * (const i64 &o, const ModInt32 &x) { return x * (ModInt32)o; }",
		  "\t\tfriend ModInt32 operator / (const ModInt32 &x, const i64 &o) { ModInt32 c = o; return x * c.Inv(); }",
		  "\t\tfriend ModInt32 operator / (const i64 &o, const ModInt32 &x) { ModInt32 c = o; return c * x.Inv(); }",
		  "\t\tModInt32 operator ^ (i64 o)const { ModInt32 r = 1, t = v; while (o) { if (o & 1)r *= t; t *= t; o >>= 1; }return r; }",
		  "\t\tModInt32 operator ~ () { return (*this) ^ (P - 2); }",
		  "\t\tModInt32 Inv() const { return (*this) ^ (P - 2); }",
		  "\t\tfriend std::istream & operator >> (std::istream &in, ModInt32 &x) { i64 d; in >> d; x = d; return in; }",
		  "\t\tfriend std::ostream & operator << (std::ostream &out, const ModInt32 &x) { out << x.v; return out; }",
		  "\t};",
		//   "\ttemplate <std::int64_t _P>",
		//   "\tstruct Modint64_t {",
		//   "\t\tusing i128 = __int128_t;",
		//   "\t\tstatic constexpr int64_t P = _P;",
		//   "\t\tint64_t v;",
		//   "\t\tModint64_t() : v(0) {}",
		//   "\t\tModint64_t(const i128 &_v) { v = _v % P; if (v < 0) v += P; }",
		//   "\t\texplicit operator long long() const { return v; }",
		//   "\t\texplicit operator bool() const { return v > 0; }",
		//   "\t\tbool operator == (const Modint64_t &o) const { return v == o.v; }",
		//   "\t\tbool operator != (const Modint64_t &o) const { return v != o.v; }",
		//   "\t\tModint64_t operator - () const { return Modint64_t(v ? P - v : 0); }",
		//   "\t\tModint64_t operator + () const { return *this; }",
		//   "\t\tModint64_t& operator ++ () { ++ v; if (v == P) v = 0; return *this; }",
		//   "\t\tModint64_t& operator -- () { if (v == 0) v = P; -- v; return *this; }",
		//   "\t\tModint64_t operator ++ (int) { Modint64_t r = *this; ++ *this; return r; }",
		//   "\t\tModint64_t operator -- (int) { Modint64_t r = *this; -- *this; return r; }",
		//   "\t\tModint64_t& operator += (const Modint64_t &o) { v += o.v; if (v >= P) v -= P; return *this;}",
		//   "\t\tModint64_t operator + (const Modint64_t &o) const { return Modint64_t(*this) += o; }",
		//   "\t\tModint64_t& operator -= (const Modint64_t &o) { v -= o.v; if (v < 0) v += P; return *this; }",
		//   "\t\tModint64_t operator - (const Modint64_t &o) const { return Modint64_t(*this) -= o; }",
		//   "\t\tModint64_t& operator *= (const Modint64_t &o) { v = (int64_t)(((i128)v)*o.v%P); return *this; }",
		//   "\t\tModint64_t operator * (const Modint64_t &o) const { return Modint64_t(*this) *= o; }",
		//   "\t\tModint64_t& operator /= (const Modint64_t &o) { return (*this) *= o.Inv(); }",
		//   "\t\tModint64_t operator / (const Modint64_t &o) const { return Modint64_t(*this) /= o; }",
		//   "\t\tfriend Modint64_t operator + (const Modint64_t &x, const i128 &o) { return x + (Modint64_t)o; }",
		//   "\t\tfriend Modint64_t operator + (const i128 &o, const Modint64_t &x) { return x + (Modint64_t)o; }",
		//   "\t\tfriend Modint64_t operator - (const Modint64_t &x, const i128 &o) { return x - (Modint64_t)o; }",
		//   "\t\tfriend Modint64_t operator - (const i128 &o, const Modint64_t &x) { return (Modint64_t)o - x; }",
		//   "\t\tfriend Modint64_t operator * (const Modint64_t &x, const i128 &o) { return x * (Modint64_t)o; }",
		//   "\t\tfriend Modint64_t operator * (const i128 &o, const Modint64_t &x) { return x * (Modint64_t)o; }",
		//   "\t\tfriend Modint64_t operator / (const Modint64_t &x, const i128 &o) { Modint64_t c = o; return x * c.Inv(); }",
		//   "\t\tfriend Modint64_t operator / (const i128 &o, const Modint64_t &x) { Modint64_t c = o; return c * x.Inv(); }",
		//   "\t\tModint64_t operator ^ (i128 o)const { Modint64_t r = 1, t = v; while (o) { if (o & 1)r *= t; t *= t; o >>= 1; }return r; }",
		//   "\t\tModint64_t operator ~ () { return (*this) ^ (P - 2); }",
		//   "\t\tModint64_t Inv() const { return (*this) ^ (P - 2); }",
		//   "\t\tfriend std::istream & operator >> (std::istream &in, Modint64_t &x) { int64_t d; in >> d; x = d; return in; }",
		//   "\t\tfriend std::ostream & operator << (std::ostream &out, const Modint64_t &x) { out << x.v; return out; }",
		//   "\t};",
		  "}",
		  "using mint = RoyalGuard::Integer::ModInt32<int(1e9 + 7)>;",
		  "// using mint = RoyalGuard::Integer::ModInt32<int(998244353)>;"
		],
		"description": "Mod Int32"
	  }
}